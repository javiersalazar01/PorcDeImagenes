/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dialogs.DialogsHelper;
import enums.FormatoDeImagen;
import java.awt.Image;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import listeners.MarcarFotogramaListener;
import modelo.Fotogramas;
import modelo.Imagen;
import procesadores.ProcesadorDeVideo;
import procesadores.Segmentador;
import utiles.Umbralizador;

/**
 *
 * @author javi_
 */
public class VentanaVideoSegmentar extends javax.swing.JInternalFrame {

    /**
     * Creates new form VentanaVideoSecmentar
     */
    private JLabel labelPrincipal;
    
    public VentanaVideoSegmentar() {
        initComponents();
        labelPrincipal = new JLabel("");
        labelPrincipal.setHorizontalAlignment(SwingConstants.CENTER);
        labelPrincipal.setBounds(0, 0, 400, 300);
        getContentPane().add(labelPrincipal);
        setAllButtonsEnabled(false);
        jMenuItemCuadros.setVisible(false); 
        jMenuItemOficina.setVisible(false);
        jMenuItemHojita.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        botonSegmentar = new javax.swing.JButton();
        botonPrincipio = new javax.swing.JButton();
        botonFotogramaAnterior = new javax.swing.JButton();
        botonPlay = new javax.swing.JButton();
        botonSeleccionar = new javax.swing.JButton();
        botonSiguienteFotograma = new javax.swing.JButton();
        Otsu = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        consola = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItemHojita = new javax.swing.JMenuItem();
        jMenuItemCuadros = new javax.swing.JMenuItem();
        jMenuItemOficina = new javax.swing.JMenuItem();

        jPasswordField1.setText("jPasswordField1");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        botonSegmentar.setText("Segmentar");
        botonSegmentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSegmentarActionPerformed(evt);
            }
        });

        botonPrincipio.setText("Principio");
        botonPrincipio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPrincipioActionPerformed(evt);
            }
        });

        botonFotogramaAnterior.setText("Anterior");
        botonFotogramaAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFotogramaAnteriorActionPerformed(evt);
            }
        });

        botonPlay.setText("Play");
        botonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPlayActionPerformed(evt);
            }
        });

        botonSeleccionar.setText("Seleccionar");
        botonSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionarActionPerformed(evt);
            }
        });

        botonSiguienteFotograma.setText("Siguiente");
        botonSiguienteFotograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSiguienteFotogramaActionPerformed(evt);
            }
        });

        Otsu.setText("Otsu");
        Otsu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OtsuActionPerformed(evt);
            }
        });

        consola.setColumns(20);
        consola.setRows(5);
        jScrollPane1.setViewportView(consola);

        jLabel2.setText("Informacion:");

        jMenu1.setText("Abrir Video");

        jMenuItem1.setText("Abuela");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItemHojita.setText("Hojita");
        jMenuItemHojita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHojitaActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemHojita);

        jMenuItemCuadros.setText("Cuadros");
        jMenuItemCuadros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCuadrosActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCuadros);

        jMenuItemOficina.setText("Oficina");
        jMenuItemOficina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOficinaActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemOficina);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(botonSegmentar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonSeleccionar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonPrincipio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonFotogramaAnterior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonPlay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonSiguienteFotograma, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Otsu, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonSegmentar)
                .addGap(18, 18, 18)
                .addComponent(botonSeleccionar)
                .addGap(18, 18, 18)
                .addComponent(botonPrincipio)
                .addGap(18, 18, 18)
                .addComponent(botonFotogramaAnterior)
                .addGap(18, 18, 18)
                .addComponent(botonPlay)
                .addGap(18, 18, 18)
                .addComponent(botonSiguienteFotograma)
                .addGap(18, 18, 18)
                .addComponent(Otsu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonSegmentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSegmentarActionPerformed
        BufferedImage bufferSegmentado = segmentarImagen();
        VentanaVideoSegmentar.this.refrescarImagen(bufferSegmentado);
        habilitarBotonesNavegacion();
        botonSegmentar.setEnabled(false);
    }//GEN-LAST:event_botonSegmentarActionPerformed

    private void botonSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionarActionPerformed
        
        labelPrincipal.addMouseListener(new MarcarFotogramaListener(VentanaVideoSegmentar.this));
        botonSegmentar.setEnabled(true);
        
    }//GEN-LAST:event_botonSeleccionarActionPerformed

    private void botonFotogramaAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFotogramaAnteriorActionPerformed
        botonSiguienteFotograma.setEnabled(true);
        botonPlay.setEnabled(true);

        if (ProcesadorDeVideo.obtenerInstancia().retrocederUnFotograma()) {

            BufferedImage bufferSegmentado = volverASegmentarImagen();
            refrescarImagen(bufferSegmentado);
            botonPrincipio.setEnabled(true);
            botonFotogramaAnterior.setEnabled(true);
        } else {

            DialogsHelper.mostarMensaje(getContentPane(), "Aqui Comienza El Video");
            botonPrincipio.setEnabled(false);
            botonFotogramaAnterior.setEnabled(false);
        };
    }//GEN-LAST:event_botonFotogramaAnteriorActionPerformed

    private void botonPrincipioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPrincipioActionPerformed
        ProcesadorDeVideo.obtenerInstancia().reiniciar();
        consola.setText("");

        BufferedImage bufferSegmentado = segmentarImagen();
        refrescarImagen(bufferSegmentado);
        botonPrincipio.setEnabled(false);
        botonFotogramaAnterior.setEnabled(false);
        botonSiguienteFotograma.setEnabled(true);
        botonPlay.setEnabled(true);
    }//GEN-LAST:event_botonPrincipioActionPerformed

    private void botonSiguienteFotogramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSiguienteFotogramaActionPerformed
        botonPrincipio.setEnabled(true);
        botonFotogramaAnterior.setEnabled(true);

        if (ProcesadorDeVideo.obtenerInstancia().avanzarUnFotograma()) {

            BufferedImage bufferSegmentado = volverASegmentarImagen();
            refrescarImagen(bufferSegmentado);
            botonSiguienteFotograma.setEnabled(true);
            botonPlay.setEnabled(true);
        } else {

            DialogsHelper.mostarMensaje(getContentPane(), "Fin del video");
            botonSiguienteFotograma.setEnabled(false);
            botonPlay.setEnabled(false);
        };


    }//GEN-LAST:event_botonSiguienteFotogramaActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        ProcesadorDeVideo.obtenerInstancia().cargarVideo(Fotogramas.ABUELA);
        refrescarImagen(ProcesadorDeVideo.obtenerInstancia().getImagenActual().getBufferedImage());
        botonSeleccionar.setEnabled(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void botonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPlayActionPerformed
       SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {

                        while (ProcesadorDeVideo.obtenerInstancia().avanzarUnFotograma()) {

                            BufferedImage bufferSegmentado = volverASegmentarImagen();
                            refrescarImagen(bufferSegmentado);
                        }
                        return null;
                    }
                };
                mySwingWorker.execute();

                botonPrincipio.setEnabled(true);
                botonFotogramaAnterior.setEnabled(true);
                botonSiguienteFotograma.setEnabled(false);
                botonPlay.setEnabled(false);
    }//GEN-LAST:event_botonPlayActionPerformed

    private void OtsuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OtsuActionPerformed
        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {

                        while (ProcesadorDeVideo.obtenerInstancia().avanzarUnFotograma()) {

                            Imagen imagenUmbralizada = Umbralizador.generarUmbralizacionColor(ProcesadorDeVideo.obtenerInstancia().getImagenActual());
                            refrescarImagen(imagenUmbralizada.getBufferedImage());
                        }
                        return null;
                    }
                };
                mySwingWorker.execute();
    }//GEN-LAST:event_OtsuActionPerformed

    private void jMenuItemHojitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHojitaActionPerformed
       ProcesadorDeVideo.obtenerInstancia().cargarVideo(Fotogramas.HOJA);
        refrescarImagen(ProcesadorDeVideo.obtenerInstancia().getImagenActual().getBufferedImage());
        botonSeleccionar.setEnabled(true);
    }//GEN-LAST:event_jMenuItemHojitaActionPerformed

    private void jMenuItemCuadrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCuadrosActionPerformed
        ProcesadorDeVideo.obtenerInstancia().cargarVideo(Fotogramas.CUADROS);
        refrescarImagen(ProcesadorDeVideo.obtenerInstancia().getImagenActual().getBufferedImage());
        botonSeleccionar.setEnabled(true);
    }//GEN-LAST:event_jMenuItemCuadrosActionPerformed

    private void jMenuItemOficinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOficinaActionPerformed
        ProcesadorDeVideo.obtenerInstancia().cargarVideo(Fotogramas.OFICINA);
        refrescarImagen(ProcesadorDeVideo.obtenerInstancia().getImagenActual().getBufferedImage());
        botonSeleccionar.setEnabled(true);
    }//GEN-LAST:event_jMenuItemOficinaActionPerformed

    private BufferedImage segmentarImagen() {

        ProcesadorDeVideo procesador = ProcesadorDeVideo.obtenerInstancia();
        //BufferedImage imagenNueva = ProcesadorDeImagenes.obtenerInstancia().clonarBufferedImage(procesador.getImagenActual().getBufferedImage());

        BufferedImage ima = procesador.getImagenActual().getBufferedImage();
        ColorModel cm = ima.getColorModel();
        boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
        WritableRaster raster = ima.copyData(null);
        BufferedImage imagenNueva = new BufferedImage(cm, raster, isAlphaPremultiplied, null);

        Imagen image = new Imagen(imagenNueva, FormatoDeImagen.JPEG, "segmentada");

        long tiempoDeInicio = new Date().getTime();

        BufferedImage bufferSegmentado = Segmentador.segmentarImagenPrimeraVez(image,
                new Point(procesador.getX1(), procesador.getY1()),
                new Point(procesador.getX2(), procesador.getY2()), 100, 50);

        long tiempoDeFin = new Date().getTime();
        String tiempo = "Tiempo Fotograma " + procesador.getPosicionActual() + ": " + (tiempoDeFin - tiempoDeInicio) + " milisegundos";
        System.out.println(tiempo);
        consola.setText(consola.getText().toString() + "\n" + tiempo);

        return bufferSegmentado;
    }

    private BufferedImage volverASegmentarImagen() {

        ProcesadorDeVideo procesador = ProcesadorDeVideo.obtenerInstancia();

        //BufferedImage imagenNueva = ProcesadorDeImagenes.obtenerInstancia().clonarBufferedImage(procesador.getImagenActual().getBufferedImage());
        BufferedImage ima = procesador.getImagenActual().getBufferedImage();
        ColorModel cm = ima.getColorModel();
        boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
        WritableRaster raster = ima.copyData(null);
        BufferedImage imagenNueva = new BufferedImage(cm, raster, isAlphaPremultiplied, null);

        Imagen image = new Imagen(imagenNueva, FormatoDeImagen.JPEG, "segmentada");

        long tiempoDeInicio = new Date().getTime();

        BufferedImage bufferSegmentado = Segmentador.volverASegmentar(image, 100, 50);

        long tiempoDeFin = new Date().getTime();
        String tiempo = "Tiempo Fotograma " + procesador.getPosicionActual() + ": " + (tiempoDeFin - tiempoDeInicio) + " milisegundos";
        System.out.println(tiempo);
        consola.setText(consola.getText().toString() + "\n" + tiempo  );
        
        return bufferSegmentado;
    }

    public void refrescarImagen(BufferedImage imagen) {
        labelPrincipal.setIcon(new ImageIcon(imagen));
        
    }

    public JLabel getPanelDeImagen() {

        return labelPrincipal;
    }

    public void habilitarBotonSegmentar() {

        botonSegmentar.setEnabled(true);
    }

    public void habilitarBotonesNavegacion() {

        botonSiguienteFotograma.setEnabled(true);
        botonPlay.setEnabled(true);
    }
    
    private void setAllButtonsEnabled(boolean var){
        botonFotogramaAnterior.setEnabled(var);        
        botonPlay.setEnabled(var);
        botonSegmentar.setEnabled(var);
        botonPrincipio.setEnabled(var);
        botonSiguienteFotograma.setEnabled(var);
        Otsu.setEnabled(var);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Otsu;
    private javax.swing.JButton botonFotogramaAnterior;
    private javax.swing.JButton botonPlay;
    private javax.swing.JButton botonPrincipio;
    private javax.swing.JButton botonSegmentar;
    private javax.swing.JButton botonSeleccionar;
    private javax.swing.JButton botonSiguienteFotograma;
    private javax.swing.JTextArea consola;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemCuadros;
    private javax.swing.JMenuItem jMenuItemHojita;
    private javax.swing.JMenuItem jMenuItemOficina;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
